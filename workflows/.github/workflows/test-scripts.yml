name: "test apps (scipts)"

on:
  push:
    # branches: main
    paths:
      # - 'programs/x86_64/**'
      - .github/workflows/test-scripts.yml

  repository_dispatch:
    types: [check]

  workflow_dispatch:
    inputs:
      reset_stats:
        description: "RESET stats"
        required: true
        default: false
        type: boolean
      retest_excluded:
        description: "TEST excluded"
        required: true
        default: false
        type: boolean
      what_test:
        description: "App names: (space between)"
        required: false
        default: ""
        type: string
      how_many:
        description: "Number of apps: (max 256)"
        required: false
        default: ''
        type: integer
      debug:
        description: "Debug worflow file"
        required: true
        default: false
        type: boolean
      am_branch:
        description: "Choose AM branch to runs on"
        required: true
        default: dev
        type: choice
        options:
        - main
        - dev

  #schedule:
    # - cron: '*/30 6-8 * * *'
    #- cron: '*/30 * * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  actions: write
  contents: write

env:
  REPO: ${{ github.repository_owner }}/AM
  BRANCH: ${{ github.event.inputs.am_branch }}
  SCRIPT_DIR: ".github/scripts"
  TOTEST: 222

jobs:
  show-inputs:
    name: "inputs 📃"
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: m-s-abeer/update-gha-summary-with-workflow-inputs@v1

  remotely-triggered:
    name: "triggered 📡"
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: "Remotely triggered"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: "Show payload"
        run: echo ${{ github.event.client_payload.sha }} >> $GITHUB_STEP_SUMMARY

  show-stats:
    name: "stats 📊"
    runs-on: ubuntu-22.04
    outputs:
      all: ${{ steps.count.outputs.all }}
      tested: ${{ steps.stats.outputs.tested }}
      excluded: ${{ steps.stats.outputs.excluded }}
    steps:
      - name: "Checkout AM"
        if: github.event.inputs.reset_stats != 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}

      - name: "Count programs 📊"
        if: github.event.inputs.reset_stats != 'true'
        id: count
        run: |
          echo "Excluding: kdegames kdeutils node platform-tools ffwa-" >> $GITHUB_STEP_SUMMARY
          sort programs/x86_64-apps | grep -v "\"kdegames\"\|\"kdeutils\"\|\"node\"\|\"platform-tools\"\| ffwa-" | awk '{print $2}' > appslist
          x64Count=$(wc -l < appslist)
          echo "all=$x64Count" >> $GITHUB_OUTPUT


      - name: "Upload appslist"
        if: github.event.inputs.reset_stats != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: appslist
          path: appslist
          if-no-files-found: error
          retention-days: 1
          compression-level: 0

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Reset stats"
        if: github.event.inputs.reset_stats == 'true'
        run: sh ${{ env.SCRIPT_DIR }}/reset.sh

      - name: "Count stats 📊"
        if: github.event.inputs.reset_stats != 'true'
        id: stats
        run: sh ${{ env.SCRIPT_DIR }}/countStats.sh


      - name: "Show stats 📊"
        if: github.event.inputs.reset_stats != 'true'
        run: |
          echo "### 🎬 apps: ${{ steps.count.outputs.all }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.stats.outputs.tested }}" != '0' ]]; then
            echo "🔨 tests:" >> $GITHUB_STEP_SUMMARY
            echo " 🏁 ${{ steps.stats.outputs.tested }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ steps.stats.outputs.excluded }}" != '0' ]]; then
            echo " ❌ ${{ steps.stats.outputs.excluded }} (excluded)" >> $GITHUB_STEP_SUMMARY
          fi

  generate-matrix:
    name: "matrix 🌀"
    if: github.event.inputs.reset_stats != 'true'
    needs: show-stats
    runs-on: ubuntu-22.04
    outputs:
      skip: ${{ steps.set-matrix.outputs.skip }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Download appslist"
        uses: actions/download-artifact@v4
        with:
          name: appslist

      - name: "Generate Matrix 🏆"
        id: set-matrix
        if: github.event.inputs.retest_excluded != 'true'
        run: sh ${{ env.SCRIPT_DIR }}/gen.sh

  run-actions:
    name: "🔨"
    needs: generate-matrix
    runs-on: ubuntu-22.04
    if: ${{ needs.generate-matrix.outputs.skip != 'true' }}
    strategy:
      fail-fast: false
      max-parallel: 23
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    env:
      TIMEOUT: 10
    steps:
      - name: "Checkout AM"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}

        # Added ripgrep for bat
      - name: "Cache dependencies"
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: wget curl zsync ripgrep
          version: 1.0

      - name: "Install AM 🎁"
        run: |
          #sudo systemctl enable tor.service || systemctl enable tor.service
          #sudo systemctl start tor.service || systemctl start tor.service
          chmod +x ./INSTALL
          sudo ./INSTALL 2> /dev/null || ./INSTALL
          if [ ${{ env.BRANCH }} == main ]; then
            echo "Running on main branch"
          elif [ ${{ env.BRANCH }} == dev ]; then
            am --devmode-enable
          fi

      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          path: results

      - name: "Create directory"
        working-directory: programs/x86_64
        run: |
          echo "Creating results directory"
          mkdir -p results

      - name: "APP ${{ matrix.file }} 🚧"
        working-directory: programs/x86_64
        run: echo "APP=\"${{ matrix.file }}\"" | tee -a "results/out-${{ matrix.file }}"

      - name: "Is ${{ matrix.file }} AppImage? 🚧"
        id: is-appimage
        working-directory: programs/x86_64
        run: |
          if grep -qe "appimage-extract\|mage\$\|tmp/\*mage" "${{ matrix.file }}" 1>/dev/null; then
            echo "APPIMAGE='yes'" | tee -a "results/out-${{ matrix.file }}"
          else
            #echo "EXIT_CODE=99" >> $GITHUB_ENV
            echo "APPIMAGE='no'" >> results/out-"${{ matrix.file }}"
          fi

      - name: "Is ${{ matrix.file }} on GitHub? 🚧"
        id: on-github
        working-directory: programs/x86_64
        run: |
          if grep -q "api.github.com" "${{ matrix.file }}" 2>/dev/null; then
            echo "GITHUB='yes'" | tee -a "results/out-${{ matrix.file }}"
          else
            echo "GITHUB='no'" >> results/out-"${{ matrix.file }}"
          fi

      - name: "SITE ${{ matrix.file }} 🚧"
        working-directory: programs/x86_64
        run: |
          if grep -q "^SITE=" "${{ matrix.file }}" 2>/dev/null; then
            SITE=$(eval echo "$(grep -i '^SITE=' "${{ matrix.file }}" | head -1 | sed 's/SITE=//g')")
            echo "SITE=\"$SITE\"" | tee -a "results/out-${{ matrix.file }}"
          fi

      - name: "test ${{ matrix.file }} 🚧"
        id: test
        working-directory: programs/x86_64
        run: sh ${{ env.SCRIPT_DIR }}/test.sh

      - name: "Upload out ⬆️"
        uses: actions/upload-artifact@v4
        with:
          name: out-${{ matrix.file }}
          path: programs/x86_64/results/out-${{ matrix.file }}
          if-no-files-found: error
          retention-days: 1
          compression-level: 0

      - name: "Upload KO Results ☝️"
        # if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ko-${{ matrix.file }}
          path: programs/x86_64/results/ko-${{ matrix.file }}
          if-no-files-found: ignore
          retention-days: 1

      - name: "Upload OK Results ⬆️"
        # if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ok-${{ matrix.file }}
          path: programs/x86_64/results/ok-${{ matrix.file }}
          if-no-files-found: ignore
          retention-days: 1

  check-failed:
    name: "retest ❓"
    needs: run-actions
    runs-on: ubuntu-22.04
    if: (always() && github.event.inputs.reset_stats != 'true' && needs.generate-matrix.outputs.skip != 'true')
    outputs:
      failed: ${{ steps.proces.outputs.failed }}
    steps:
      - name: "Git Config"
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Download ko results"
        uses: actions/download-artifact@v4
        with:
          path: results
          pattern: ko-*

      - name: "Process failed results"
        id: proces
        run: |
          find -name 'ko-*'
          find -name 'failing'
          for KoFile in results/ko-*; do
            [ -f "$KoFile" ] || continue
            appname=$(basename "$KoFile" | cut -d'-' -f2-)
            if [[ -f "$KoFile" ]]; then
              echo "$appname" | tee -a failing
              rm -f "$KoFile"
            fi
          done
          if [ -f results/failing ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          fi

      - name: "Upload failing"
        uses: actions/upload-artifact@v4
        with:
          name: failing
          path: ./
          if-no-files-found: ignore
          retention-days: 1

  test-failed:
    name: "retest 🔭"
    needs: check-failed
    runs-on: ubuntu-22.04
    if: needs.check-failed.outputs.failed == 'true'
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Git Config"
        run: |
           git config --global user.name "${{ github.repository_owner }}"
           git config --global user.email "noreply@github.com"

      - name: "Checkout AM"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}

      - name: "Download failing"
        uses: actions/download-artifact@v4
        with:
          name: failing
          path: results

        # Added ripgrep for bat
      - name: "Cache dependencies"
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: wget curl zsync ripgrep
          version: 1.0

      - name: "Install AM 🎁"
        run: |
          #sudo systemctl enable tor.service || systemctl enable tor.service
          #sudo systemctl start tor.service || systemctl start tor.service
          chmod +x ./INSTALL
          sudo ./INSTALL 2> /dev/null || ./INSTALL
          if [ ${{ env.BRANCH }} == main ]; then
            echo "Running on main branch"
          elif [ ${{ env.BRANCH }} == dev ]; then
            am --devmode-enable
          fi

      - name: "Retest"
        id: retest
        #working-directory: programs/x86_64
        run: |
          find -name 'results'
          echo "-----------------------"
          find -name 'failing'
          echo "-----------------------"
          ls
          echo "-----------------------"
          ls results/ -R
          echo "-----------------------"
          for fail in $(cat results/failing); do
            echo "👻 Trying again: $fail" >> $GITHUB_STEP_SUMMARY
            mkdir -p results
            cd programs/x86_64
            echo "APP=\"$fail\"" | tee -a "../../results/out-$fail"
            if grep -qe "appimage-extract\|mage\$\|tmp/\*mage" "$fail" 1>/dev/null; then
              echo "APPIMAGE='yes'" | tee -a ../../results/out-"$fail"
            else
              #echo "EXIT_CODE=99" >> $GITHUB_ENV
              echo "APPIMAGE='no'" >> "../../results/out-$fail"
            fi
            if grep -q "api.github.com" "$fail" 2>/dev/null; then
              echo "GITHUB='yes'" | tee -a "../../results/out-$fail"
            else
              #echo "EXIT_CODE=9" >> $GITHUB_ENV
              echo "GITHUB='no'" >> "../../results/out-$fail"
            fi
            if grep -q "^SITE=" "$fail" 2>/dev/null; then
              SITE=$(eval echo "$(grep -i '^SITE=' "$fail" | head -1 | sed 's/SITE=//g')")
              echo "SITE=\"$SITE\"" | tee -a ../../results/out-"$fail"
            fi
            if grep -q "^version=" "$fail" 2>/dev/null; then
              link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
              if [ -z "$link" ]; then
                #sed -i 's/curl -Ls/torsocks curl -Ls/g' "$fail"
                link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
                if [ -z "$version" ]; then
                  #sudo systemctl restart tor.service || systemctl restart tor.service
                  #wait
                  link=$(eval echo "$(grep -i '^version=' "$fail" | head -1 | sed 's/version=//g')")
                fi
              fi
              [ -n "$link" ] && echo "link=\"$link\"" | tee -a ../../results/out-"$fail"
            fi
            echo '-----------------------------------------------------------------' | tee -a ../../results/out-"$fail"
            if [[ "$fail" =~ (appimageupdatetool|gimp|libreoffice|mpv|wine) ]]; then
              if command -v echo 1 | am -i "$fail" --debug 2>&1 | tee -a "../../results/log-$fail"; then
                size=$(cat "../../results/out-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                Preversion=$(cat "../../results/log-$fail" | tee /dev/null | grep '◆' | tail -1 | head -1)
                echo "pre version is $Preversion"
                version=$(echo "$Preversion" | awk '{print $3}')
                echo "version=$version" | tee -a "../../results/out-$fail"
              else
                echo "$fail" | tee -a ../../results/excluded failed
              fi
            elif [[ "$fail" =~ (bat-extras) ]]; then
              if command -v echo y | am -i bat "$fail" --debug 2>&1 | tee -a "../../results/log-$fail"; then
                size=$(cat "../../results/log-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2 | tail -1)
                Preversion=$(cat "../../results/log-$fail" | tee /dev/null | grep '◆' | tail -2 | head -1)
                echo "pre version is $Preversion"
                version=$(echo "$Preversion" | awk '{print $3}' | cut -d'.' -f1-3)
                echo "version=$version" | tee -a "../../results/out-$fail"
              else
                echo "$fail" | tee -a ../../results/excluded failed
              fi
            else
              if command -v echo y | am -i "$fail" --debug 2>&1 | tee -a "../../results/log-$fail"; then
                size=$(cat "../../results/log-$fail" | tee /dev/null | grep 'OF DISK SPACE' | cut -d'(' -f2 | cut -d' ' -f1,2)
                Preversion=$(cat "../../results/log-$fail" | tee /dev/null | grep '◆' | tail -1)
                echo "pre version is $Preversion"
                version=$(cat "../../results/log-$fail" | tee /dev/null | grep '◆' | tail -1 | awk '{print $3}')
                echo "version=$version" | tee -a "../../results/out-$fail"
                rawlink=$(grep -E 'https?://' < "../../results/log-${{ matrix.file }}" | head -1 | cut -d' ' -f4)
                echo "link=${rawlink}" | tee -a "../../results/out-${{ matrix.file }}"
              else
                echo "$fail" | tee -a ../../results/excluded failed
              fi
            fi
            rm -f "../../results/$KoFile"
          done
          cd ../../
          rm -f results/failing

      - name: "Upload KO Results ☝️"
        #if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: results/ko-*
          if-no-files-found: warn
          retention-days: 1
          compression-level: 0

      - name: "Upload failed"
        #if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: results/failed
          if-no-files-found: warn
          retention-days: 1
          compression-level: 0
  
      - name: "Upload OK Results ⬆️"
        # if: success()
        uses: actions/upload-artifact@v4
        with:
          path: results/ok-*
          if-no-files-found: warn
          retention-days: 1
          compression-level: 0

      - name: "Upload out ⬆️"
        uses: actions/upload-artifact@v4
        with:
          path: results/out-*
          if-no-files-found: warn
          retention-days: 1
          compression-level: 0

      - name: checkout
        uses: actions/checkout@v4

      - name: commit
        run: |
          rm -f results/failing || echo "Removing failing"
          if [ -f results/excluded ]; then
            sort -u results/excluded -o results/excluded  || echo "Sorting failed"
            git add results/excluded || echo "Excluded not added"
          fi
          git add results/log || echo "Log not added"
          git add results/tested || echo "Tested not added"
          git add results || echo "Results dir not added"
          git commit -m "retest" || echo "Not commited"
          git push || echo "Not pushed"

  update-results:
    name: "results 🎓"
    needs: test-failed
    runs-on: ubuntu-22.04
    if: (always() && github.event.inputs.reset_stats != 'true' && needs.generate-matrix.outputs.skip != 'true')
    outputs:
      failed: ${{ steps.proces.outputs.failed }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Git Config"
        run: |
          git config --global user.name "${{ github.repository_owner }}"
          git config --global user.email "noreply@github.com"

      - name: "Download results ⬇️"
        uses: actions/download-artifact@v4
        with:
          path: results
          merge-multiple: true

      - name: "Download appslist"
        uses: actions/download-artifact@v4
        with:
          name: appslist

      - name: "Process log results 2"
        id: proces2
        if: (always() && needs.generate-matrix.outputs.skip != 'true' && github.event.inputs.reset_stats != 'true')
        run: |
          mkdir -p results
          ls -R
          for LogFile in results/out-*; do

            appname=$(basename "$LogFile" | cut -d'-' -f2-)
            echo '_________________________________________________________________'
            echo "$appname"
            echo '-----------------------------------------------------------------'
            cat "$LogFile"
            echo '-----------------------------------------------------------------'

            if [ -z "$size" ]; then
              size=$(cat "$LogFile" | grep 'size' | cut -d'=' -f2)
              echo "size is $size"
            fi

            if [ -z "$version" ]; then
              version=$(cat "$LogFile" | grep 'version' | cut -d'=' -f2)
              echo "version is $version"
            fi

            cat "$LogFile" | grep -E '(^.*=.*$|^.*----.*$)' >> results/log
            echo "$appname" >> results/tested
            echo '-----------------------------------------------------------------' >> results/log
            rm -f "$LogFile"

          done

          if [ -f failed ]; then
            for fail in failed; do
              echo ":x: $fail excluded now" >> $GITHUB_STEP_SUMMARY
            done
          fi

          if [ -f results/tested ]; then
            sort -u results/tested -o results/tested
            git add results/tested
          fi

          if [ -f results/log ]; then
            git add results/log
          fi

          if [ -f results/excluded ]; then
            sort -u results/excluded -o results/excluded
            git add results/excluded
          fi

          git add results

      - name: "Show results"
        if: (always() && needs.generate-matrix.outputs.skip != 'true' && github.event.inputs.reset_stats != 'true')
        run: |
          if [[ -f results/tested ]]; then
            echo "tested found"
            tested=$(wc -l < results/tested 2>/dev/null || echo 0)
          else
            echo "tested not found"
            tested='0'
          fi
          if [[ -f results/excluded ]]; then
            echo "excluded found"
            excluded=$(wc -l < results/excluded 2>/dev/null || echo 0)
          else
            echo "excluded not found"
            excluded='0'
          fi
          if [[ -f failed ]]; then
            echo "failed found"
            fail=$(wc -l < failed 2>/dev/null || echo 0)
          else
            echo "failed not found"
            fail='0'
          fi
          count=$(wc -l < appslist)
          remaining=$((count - tested - excluded))
          (( remaining < 0 )) && remaining=0
          echo "🏁 $tested tested" >> $GITHUB_STEP_SUMMARY
          if [[ "$fail" != '0' ]]; then
            echo ":x: $fail excluded now" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$excluded" != '0' ]]; then
            echo "😱 $excluded excluded" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### 🛅 $remaining to test" >> $GITHUB_STEP_SUMMARY
          echo '-----------------------------------------------------------------'
          git status
          echo '-----------------------------------------------------------------'
          if [ -f log ]; then
            git add log
          fi
          rm -f appslist
          rm -f results/appslist
          rm -f results/failing
          rm -f results/ok-*
          rm -f results/ko-*
          rm -rf results/results
          echo '-----------------------------------------------------------------'
          echo "Missed results:"
          echo '-----------------------------------------------------------------'
          ls -R results/
          for rest in results/*; do
            #echo "suspended for now"
            cat "$rest"
          done
          echo '-----------------------------------------------------------------'

      - name: "Push"
        if: ${{ needs.generate-matrix.outputs.skip != 'true' }}
        run: |
          if [[ "$GITHUB_REF" == 'refs/pull/*' ]]; then
            echo "This is a Pull Request. Not saving results."
            exit 0
          elif git diff-index --quiet HEAD; then
            echo "No changes to commit." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            git status
            git log --oneline -5
            git diff
            git add results
            git commit -m "check"
            git push --force-with-lease && echo "sync successfull" >> $GITHUB_STEP_SUMMARY || (git diff && git status)
          fi
          git clean -f

  # delete-all-artifacts:
  #   name: "cleanup 🧹"
  #   runs-on: ubuntu-22.04
  #   needs: update-results
  #   if: always()
  #   steps:
  #     - name: "Check out repository 🏃"
  #       uses: actions/checkout@v4
  #
  #     - name: "Delete Artifacts 🙈"
  #       env:
  #         REPO_NAME: ${{ github.repository }}
  #         RUN_ID: ${{ github.run_id }}
  #         TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         echo "Fetching and deleting all artifacts for run ID: $RUN_ID"
  #         PAGE=1
  #         DELETED=0
  #         while true; do
  #           RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
  #            "https://api.github.com/repos/$REPO_NAME/actions/runs/$RUN_ID/artifacts?per_page=1000&page=$PAGE")
  #           ARTIFACT_IDS=$(echo "$RESPONSE" | jq -r '.artifacts[].id')
  #           if [[ -z "$ARTIFACT_IDS" ]]; then
  #             echo "No more artifacts to delete. Total deleted: $DELETED"
  #             break
  #           fi
  #           for ARTIFACT_ID in $ARTIFACT_IDS; do
  #             echo "Deleting artifact with ID: $ARTIFACT_ID"
  #             curl -X DELETE -s -H "Authorization: token $TOKEN" \
  #              "https://api.github.com/repos/$REPO_NAME/actions/artifacts/$ARTIFACT_ID"
  #             ((DELETED+=1))
  #           done
  #           ((PAGE+=1))
  #         done
  #         echo "Successfully deleted $DELETED artifacts."
  #         echo "Git clean"
  #         git clean -f

  already-tested:
    name: "all 🏁"
    runs-on: ubuntu-22.04
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.skip == 'true' }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Git Config"
        run: |
           git config --global user.name "${{ github.repository_owner }}"
           git config --global user.email "noreply@github.com"

      - name: "Reset all tested"
        run: |
          echo "All apps already tested..." >> $GITHUB_STEP_SUMMARY
          echo "### stats RESET" >> $GITHUB_STEP_SUMMARY
          cp results/log log.old 2>/dev/null && git add log.old || echo "Log deleted without backup"
          cp results/excluded excluded.old 2>/dev/null && git add excluded.old || echo "Excluded deleted without backup"
          #rm -rf results
          git rm -r results
          git commit -m "reset stats"
          git push --force
          git clean -f
